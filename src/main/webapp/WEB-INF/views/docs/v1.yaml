swagger: "2.0"
info:
  description: "Documentation for the chatty app"
  version: "1.0.0"
  title: "chatty REST API"
host: "localhost:8080"
basePath: "/api/v1"
tags:
- name: "me"
  description: "personal administration"
- name: "users"
  description: "Actions with users"
- name: "chats"
  description: "Actions with chats"

schemes:
- "http"

paths:
  /createUser:
    get:
      tags:
      - "me"
      summary: "Create user"
      description: "Returns a single user"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "New user username"
        required: true
        type: "string"
        minLength: 1
        maxLength: 200
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Empty or too long username"
          schema:
            $ref: "#/definitions/User"
    post:
      tags:
      - "me"
      summary: "Create user"
      description: "Returns a single user"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "New user username"
        required: true
        type: "string"
        minLength: 1
        maxLength: 200
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Empty or too long username"
          schema:
            $ref: "#/definitions/User"
  /me:
    get:
      tags:
      - "me"
      summary: "Get info about me by api_key"
      description: "Returns a single user"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid api_key"
          schema:
            $ref: "#/definitions/User"
  /me/change:
    get:
      tags:
      - "me"
      summary: "Change user data by api_key"
      description: "Returns a single user"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
        minLength: 1
        maxLength: 200
      - name: "username"
        in: "query"
        description: "New username"
        required: true
        type: "string"
        minLength: 1
        maxLength: 200
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Empty or too long username or invalid api_key"
          schema:
            $ref: "#/definitions/User"
    post:
      tags:
      - "me"
      summary: "Change user data by api_key"
      description: "Returns a single user"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
        minLength: 1
        maxLength: 200
      - name: "username"
        in: "query"
        description: "New username"
        required: true
        type: "string"
        minLength: 1
        maxLength: 200
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Empty or too long username or invalid api_key"
          schema:
            $ref: "#/definitions/User"

  /getUsers:
    get:
      tags:
      - "users"
      summary: "Get all users"
      description: "Returns a user list"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UsersList"
        "400":
          description: "Invalid api_key"
          schema:
            $ref: "#/definitions/UsersList"
  /getUser:
    get:
      tags:
      - "users"
      summary: "Get user by id"
      description: "Returns a single user"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
      - name: "uid"
        in: "query"
        description: "User id"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UsersList"
        "400":
          description: "Invalid api_key or uid"
          schema:
            $ref: "#/definitions/UsersList"
  /joinChatWith:
    get:
      tags:
      - "chats"
      summary: "Create or get chat with user"
      description: "Returns a Chat"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
      - name: "uid"
        in: "query"
        description: "User id"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Chat"
        "400":
          description: "Invalid api_key or uid"
          schema:
            $ref: "#/definitions/Chat"
  /getChatMessages:
    get:
      tags:
      - "chats"
      summary: "Get all chat messages"
      description: "Returns a list of Messages"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
      - name: "cid"
        in: "query"
        description: "Chat id"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MessagesList"
        "400":
          description: "Invalid api_key or cid"
          schema:
            $ref: "#/definitions/MessagesList"
  /sendMessage:
    get:
      tags:
      - "chats"
      summary: "Send Message to Chat"
      description: "Returns a Messages"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
      - name: "cid"
        in: "query"
        description: "Chat id"
        required: true
        type: "integer"
      - name: "text"
        in: "query"
        description: "Message text"
        required: true
        type: "string"
        minLength: 1
        maxLength: 200
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MessagesList"
        "400":
          description: "Invalid api_key or cid"
          schema:
            $ref: "#/definitions/MessagesList"
    post:
      tags:
      - "chats"
      summary: "Send Message to Chat"
      description: "Returns a Messages"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
      - name: "cid"
        in: "query"
        description: "Chat id"
        required: true
        type: "integer"
      - name: "text"
        in: "query"
        description: "Message text"
        required: true
        type: "string"
        minLength: 1
        maxLength: 200
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MessagesList"
        "400":
          description: "Invalid api_key or cid"
          schema:
            $ref: "#/definitions/MessagesList"
  /getUpdates:
    get:
      tags:
      - "chats"
      summary: "Long-Polling method"
      description: "Returns a updates"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "query"
        description: "Api key"
        required: true
        type: "string"
      - name: "cid"
        in: "query"
        description: "Chat id"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Update"


definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      apiKey:
        type: "string"
      isOnline:
        type: "boolean"
        default: false
  Chat:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Message:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      chatId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      text:
        type: "string"
      time:
        type: "integer"
        format: "int64"
      type:
        type: "string"
        enum:
          - join_chat
          - message
  Update:
    type: "object"
    properties:
      onlineUsers:
        type: "array"
        items: 
          $ref: "#/definitions/User"
      notices:
        type: "array"
        items: 
          $ref: "#/definitions/User"
      chatUpdates:
        type: "array"
        items: 
          $ref: "#/definitions/Message"
      chat:
        type: "object"
        $ref: "#/definitions/Chat"

  UsersList:
    type: "array"
    items: 
      $ref: "#/definitions/User"
  
  MessagesList:
    type: "array"
    items: 
      $ref: "#/definitions/Message"